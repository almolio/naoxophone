// Generated by gencpp from file nao_control_tutorial_1/InterpolateJointsRequest.msg
// DO NOT EDIT!


#ifndef NAO_CONTROL_TUTORIAL_1_MESSAGE_INTERPOLATEJOINTSREQUEST_H
#define NAO_CONTROL_TUTORIAL_1_MESSAGE_INTERPOLATEJOINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nao_control_tutorial_1
{
template <class ContainerAllocator>
struct InterpolateJointsRequest_
{
  typedef InterpolateJointsRequest_<ContainerAllocator> Type;

  InterpolateJointsRequest_()
    : joint_names()
    , steps()
    , angles()
    , times()
    , relative(false)
    , blocking(false)  {
    }
  InterpolateJointsRequest_(const ContainerAllocator& _alloc)
    : joint_names(_alloc)
    , steps(_alloc)
    , angles(_alloc)
    , times(_alloc)
    , relative(false)
    , blocking(false)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _steps_type;
  _steps_type steps;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angles_type;
  _angles_type angles;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _times_type;
  _times_type times;

   typedef uint8_t _relative_type;
  _relative_type relative;

   typedef uint8_t _blocking_type;
  _blocking_type blocking;





  typedef boost::shared_ptr< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct InterpolateJointsRequest_

typedef ::nao_control_tutorial_1::InterpolateJointsRequest_<std::allocator<void> > InterpolateJointsRequest;

typedef boost::shared_ptr< ::nao_control_tutorial_1::InterpolateJointsRequest > InterpolateJointsRequestPtr;
typedef boost::shared_ptr< ::nao_control_tutorial_1::InterpolateJointsRequest const> InterpolateJointsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nao_control_tutorial_1

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3993511ed99026e2e0304c1be844a63e";
  }

  static const char* value(const ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3993511ed99026e2ULL;
  static const uint64_t static_value2 = 0xe0304c1be844a63eULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nao_control_tutorial_1/InterpolateJointsRequest";
  }

  static const char* value(const ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
string[] joint_names\n\
int32[] steps\n\
float32[] angles\n\
float32[] times\n\
bool relative\n\
bool blocking\n\
\n\
";
  }

  static const char* value(const ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_names);
      stream.next(m.steps);
      stream.next(m.angles);
      stream.next(m.times);
      stream.next(m.relative);
      stream.next(m.blocking);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InterpolateJointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nao_control_tutorial_1::InterpolateJointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "steps[]" << std::endl;
    for (size_t i = 0; i < v.steps.size(); ++i)
    {
      s << indent << "  steps[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.steps[i]);
    }
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "times[]" << std::endl;
    for (size_t i = 0; i < v.times.size(); ++i)
    {
      s << indent << "  times[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.times[i]);
    }
    s << indent << "relative: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relative);
    s << indent << "blocking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blocking);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAO_CONTROL_TUTORIAL_1_MESSAGE_INTERPOLATEJOINTSREQUEST_H
