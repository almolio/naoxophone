#!/usr/bin/env python

import rospy
import sys
import cv2
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import numpy as np 
from pathlib import Path
import matplotlib.pyplot as plt

class tutorial_4:
    def __init__(self):

        # Subscribe to the top camera 
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/nao_robot/camera/top/camera/image_raw",Image,self.callback)
        
    def callback(self, data):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)


        ### 1-4 Image processing with still image
        cwd = Path.cwd()
        imgpath = Path.joinpath(cwd,'src/tutorial_3/scripts/templateImg.jpg')
        imgraw = cv2.imread(str(imgpath), cv2.IMREAD_COLOR)
        cv2.rectangle(imgraw, (105,65), (215,210), (255,0,0), 2)
        cv2.imshow("Image with ROI", imgraw)
        image_hsv = cv2.cvtColor(imgraw, cv2.COLOR_BGR2HSV)
        h,s,v = cv2.split(image_hsv)
        cv2.imshow("Saturation",s)
        ret,img_th1 = cv2.threshold(image_hsv[:,:,1],175,255,cv2.THRESH_BINARY)
        # cv2.imshow("Threshold image",img_th1)
    
        # Calculate HIST
        # img_th1 here is a mask
        s_hist = cv2.calcHist([s], [0], img_th1, [50],[0,256])
        print(s_hist)
        # Normalize HIST
        # This is a good tutorial on back projection
        # https://docs.opencv.org/3.4/da/d7f/tutorial_back_projection.html
        # s_hist_norm=np.zeros_like(s_hist)
        # cv2.normalize(s_hist, s_hist_norm, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX) #beta = 337
        cv2.normalize(s_hist, s_hist, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX)
        print("Normalize hist {}".format(s_hist))



        ## 5. Process with new image 
        cv2.imshow('Original Image', cv_image)
        cv_image_hsv = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)
        
        cv2.imshow('HSV Image', cv_image_hsv)
        hue,sat,val= cv2.split(cv_image_hsv) 
        cv2.imshow('Sat Image', sat)
        sat_upperbound = 180
        sat_lowerbound = 100
        _, sat_mask = cv2.threshold(cv_image_hsv[:,:,1],sat_lowerbound,sat_upperbound,cv2.THRESH_BINARY)
        cv2.imshow('Mask sat', sat_mask)

        cv2.imshow('Use this to pick hue range', hue)
        # I picked these values based the lighting condition I had at the momement. Please change accordingly
        hue_range = [95,110]
        backproj = cv2.calcBackProject([hue], [0], s_hist, hue_range, scale = 1)
        cv2.imshow('backproj', backproj)

        # Bitwise comparision to get object 
        # (input, input, ouput, mask )

        bitwise_ = cv2.bitwise_and(backproj, sat_mask)
        cv2.imshow('Bitwise', bitwise_)




        cv2.waitKey(3)
        
def main(args):
    ic = tutorial_4()
    rospy.init_node('tutorial_4', anonymous=True)
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
    cv2.destroyAllWindows()

if __name__ == '__main__':
	main(sys.argv)